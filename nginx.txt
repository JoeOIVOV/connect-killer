# sym link this to /etc/nginx/sites-available/connect-nginx-config
# sudo ln -s /connect-killer/connect-nginx-config /etc/nginx/sites-available/connect-nginx-config
# 
# Then sym link to /sites-enabled:
# sudo ln -s /etc/nginx/sites-available/connect-nginx-config /etc/nginx/sites-enabled/
# 
# So that,
# /etc/nginx/sites-enabled/connect-nginx-config -> /etc/nginx/sites-available/connect-nginx-config -> this file
# 
# Test the Nginx configuration for syntax errors:
# sudo nginx -t
# 
# Apply the changes by reloading or restarting Nginx:
# sudo systemctl reload nginx
# 
# Check nginx log with:
# sudo tail -f /var/log/nginx/error.log /var/log/nginx/access.log

server {
    listen 80;
    server_name cloud.springerelectronics.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name cloud.springerelectronics.com;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;

    location / {
        proxy_pass http://127.0.0.1:3111;  # Forward HTTPS requests to the HTTP port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 80;
    server_name portal.springerelectronics.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
location = /.well-known/acme-challenge/6NEaKM028DjsXu9oWKfAXxzqvXggxoYpkZOJr6gXoz0{default_type text/plain;return 200 6NEaKM028DjsXu9oWKfAXxzqvXggxoYpkZOJr6gXoz0.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 443 ssl http2;  # Enable HTTP/2
    server_name portal.springerelectronics.com;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;

    location / {
        proxy_pass http://127.0.0.1:3111;  # Forward HTTPS requests to the HTTP port
        proxy_http_version 1.1;  # Use HTTP/1.1
        proxy_set_header Connection "keep-alive";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
location = /.well-known/acme-challenge/6NEaKM028DjsXu9oWKfAXxzqvXggxoYpkZOJr6gXoz0{default_type text/plain;return 200 6NEaKM028DjsXu9oWKfAXxzqvXggxoYpkZOJr6gXoz0.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}

server {
    listen 80;
    server_name portal.gambitdriver.org ;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;  # Enable HTTP/2
    server_name portal.gambitdriver.org ;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;

    location / {
        proxy_pass http://127.0.0.1:3111;  # Forward HTTPS requests to the HTTP port
        proxy_http_version 1.1;  # Use HTTP/1.1
        proxy_set_header Connection "keep-alive";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 80;
    server_name useradmin.springerelectronics.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
location = /.well-known/acme-challenge/Z7osIKJfO04dCc9qFvunyLuPtTGP-bRM5mzuSD_Qo3o{default_type text/plain;return 200 Z7osIKJfO04dCc9qFvunyLuPtTGP-bRM5mzuSD_Qo3o.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 443 ssl;
    server_name useradmin.springerelectronics.com;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;
   

    location / {
        proxy_pass http://127.0.0.1:3112;  # Forward HTTPS requests to the HTTP port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
location = /.well-known/acme-challenge/Z7osIKJfO04dCc9qFvunyLuPtTGP-bRM5mzuSD_Qo3o{default_type text/plain;return 200 Z7osIKJfO04dCc9qFvunyLuPtTGP-bRM5mzuSD_Qo3o.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 80;
    server_name api.springerelectronics.com;
    # Allow Let's Encrypt to complete the HTTP-01 challenge
    location /.well-known/acme-challenge/ {
        root /var/www/html;  # Or any directory Certbot uses for challenges
    }
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
location = /.well-known/acme-challenge/k34kQFU-vZJJrP46KHopBx855tTQyjKp16A6yVnI-c8{default_type text/plain;return 200 k34kQFU-vZJJrP46KHopBx855tTQyjKp16A6yVnI-c8.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}

map $http_origin $cors_origin {
    default "";
    "https://useradmin.springerelectronics.com" "$http_origin";
    "https://portal.springerelectronics.com" "$http_origin";
    "https://connect-portal.duckdns.org" "$http_origin";
    "https://connect-useradmin.duckdns.org" "$http_origin";
    "https://connect-api.duckdns.org" "$http_origin";
}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 443 ssl http2;  # Enable HTTP/2
    server_name api.springerelectronics.com;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;

    client_max_body_size 100M;

    location / {
        proxy_pass http://127.0.0.1:3112;  # Forward HTTPS requests to the HTTP port
        proxy_http_version 1.1;  # Use HTTP/1.1
        proxy_set_header Connection "keep-alive";  # Enable Keep-Alive for HTTP/1.1
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        keepalive_timeout 65;  # Keep connections alive for 65 seconds
        keepalive_requests 1000;  # Allow 1000 requests per connection

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PATCH, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;

        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PATCH, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

location = /.well-known/acme-challenge/k34kQFU-vZJJrP46KHopBx855tTQyjKp16A6yVnI-c8{default_type text/plain;return 200 k34kQFU-vZJJrP46KHopBx855tTQyjKp16A6yVnI-c8.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 80;
    server_name athena.springerelectronics.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
location = /.well-known/acme-challenge/hvgfRX6Oe0rDEpvotutEytIS0jy0uTk3qnnKyNTqU8M{default_type text/plain;return 200 hvgfRX6Oe0rDEpvotutEytIS0jy0uTk3qnnKyNTqU8M.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}

server {rewrite ^(/.well-known/acme-challenge/.*) $1 break; # managed by Certbot


    listen 443 ssl;
    server_name athena.springerelectronics.com;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;
    
    client_max_body_size 100M;

    location /ws/ {
        proxy_pass http://127.0.0.1:3112;  # Forward HTTPS requests to the HTTP port
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        send_timeout 60s;
    }
location = /.well-known/acme-challenge/hvgfRX6Oe0rDEpvotutEytIS0jy0uTk3qnnKyNTqU8M{default_type text/plain;return 200 hvgfRX6Oe0rDEpvotutEytIS0jy0uTk3qnnKyNTqU8M.4hHa8-Lcs-892Ss4J9id9rsuMEvVVEjsfc2ZnpmVnYA;} # managed by Certbot

}


server {
    listen 80;
    server_name connect-portal.duckdns.org;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name connect-portal.duckdns.org;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;

    location / {
        proxy_pass http://127.0.0.1:3111;  # Forward HTTPS requests to the HTTP port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

server {
    listen 80;
    server_name connect-useradmin.duckdns.org;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name connect-useradmin.duckdns.org;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;
   

    location / {
        proxy_pass http://127.0.0.1:3112;  # Forward HTTPS requests to the HTTP port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

server {
    listen 80;
    server_name connect-api.duckdns.org;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name connect-api.duckdns.org;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;

    client_max_body_size 100M;

    location / {
        proxy_pass http://127.0.0.1:3112;  # Forward HTTPS requests to the HTTP port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

server {
    listen 80;
    server_name connect-ws.duckdns.org;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name connect-ws.duckdns.org;

    ssl_certificate /etc/letsencrypt/live/cloud.springerelectronics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.springerelectronics.com/privkey.pem;
    
    client_max_body_size 100M;

    location /ws/ {
        proxy_pass http://127.0.0.1:3112;  # Forward HTTPS requests to the HTTP port
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        send_timeout 60s;
    }
}